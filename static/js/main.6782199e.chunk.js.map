{"version":3,"sources":["components/Persons/Person/Person.js","components/Persons/Persons.js","containers/App.js","serviceWorker.js","index.js"],"names":["person","props","style","boxShadow","padding","width","margin","marginBottom","onClick","click","name","age","type","onChange","change","persons","map","index","Person","clicked","key","id","event","changed","App","state","showPerson","nameChangeHandler","personIndex","findIndex","p","target","value","setState","deletePersonHandler","splice","togglePersonHandler","doesshow","className","Persons","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAmBeA,G,MAhBA,SAACC,GASZ,OACI,yBAAKC,MARW,CACjBC,UAAW,oBACXC,QAAQ,OACRC,MAAO,QACPC,OAAQ,SACRC,aAAc,SAIT,wBAAIC,QAASP,EAAMQ,OAAnB,cAAsCR,EAAMS,KAA5C,YAA4DT,EAAMU,KAClE,2BAAOC,KAAK,OAAOC,SAAYZ,EAAMa,YCMjCC,EAlBA,SAACd,GAEb,OACEA,EAAMc,QAAQC,KAAI,SAAChB,EAAQiB,GAAT,OAChB,kBAACC,EAAD,CACIT,MAAS,kBAAMR,EAAMkB,QAAQF,IAC7BP,KAAQV,EAAOU,KACfC,IAAOX,EAAOW,IACdS,IAAOpB,EAAOqB,GACdP,OAAW,SAACQ,GAAD,OAAWrB,EAAMsB,QAAQD,EAAOtB,EAAOqB,WCRzCG,E,4MAEnBC,MAAQ,CACNV,QAAS,CACP,CAACM,GAAG,KAAMX,KAAK,QAASC,IAAK,MAC7B,CAACU,GAAG,KAAMX,KAAK,UAAWC,IAAK,MAC/B,CAACU,GAAG,KAAMX,KAAK,OAAQC,IAAK,OAE9Be,YAAY,G,EAIdC,kBAAoB,SAACL,EAAMD,GAIxB,IAAMO,EAAc,EAAKH,MAAMV,QAAQc,WAAU,SAAAC,GAE7C,OAAOA,EAAET,KAAOA,KAGdrB,EAAM,eAAO,EAAKyB,MAAMV,QAAQa,IACtC5B,EAAOU,KAAOY,EAAMS,OAAOC,MAE3B,IAAMjB,EAAO,YAAO,EAAKU,MAAMV,SAC/BA,EAAQa,GAAe5B,EAEvB,EAAKiC,SAAS,CAAClB,QAAUA,K,EAI5BmB,oBAAsB,SAACjB,GACrB,IAAMF,EAAO,YAAO,EAAKU,MAAMV,SACzBA,EAAQoB,OAAOlB,EAAM,GAC3B,EAAKgB,SAAS,CAAClB,QAAUA,K,EAE3BqB,oBAAsB,WACpB,IAAMC,EAAW,EAAKZ,MAAMC,WAC5B,EAAKO,SAAS,CAACP,YAAcW,K,uDAI3B,OACE,yBAAKC,UAAU,OACb,0CACA,kBAACC,EAAD,CACExB,QAAWyB,KAAKf,MAAMV,QACtBQ,QAAWiB,KAAKb,kBAChBR,QAAWqB,KAAKN,2B,GAhDKO,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6782199e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst person = (props) =>{\r\n\r\n   const  stylePerson = {\r\n       boxShadow: '0 5px 10px  black',\r\n       padding:'20px',\r\n       width: '600px',\r\n       margin: '0 auto',\r\n       marginBottom: '10px'\r\n   }\r\n    return (\r\n        <div style={stylePerson}>\r\n            <h2 onClick={props.click}>my name is {props.name} and age { props.age}</h2>\r\n            <input type=\"text\" onChange = {props.change} />\r\n        </div>\r\n    )\r\n}\r\nexport default person","import React from 'react';\r\nimport Person from './Person/Person';\r\n\r\nconst persons = (props) => {\r\n\r\n    return (\r\n      props.persons.map((person, index) =>\r\n        <Person\r\n            click = {() => props.clicked(index)}\r\n            name = {person.name}\r\n            age = {person.age}\r\n            key = {person.id}\r\n            change = { (event) => props.changed(event, person.id) }\r\n        /> )\r\n\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default  persons","import React, { Component } from 'react';\nimport './App.css';\nimport Persons from '../components/Persons/Persons';\n\nexport default class App extends Component{\n\n  state = {\n    persons: [\n      {id:'p1', name:'fatmi', age: '27'},\n      {id:'p2', name:'mouloud', age: '23'},\n      {id:'p3', name:'sany', age: '21'}\n    ],\n    showPerson: false\n  }\n\n\n  nameChangeHandler = (event,id) => {\n\n    //  const personIndex = this.state.persons.findIndex(p => {return p.id === id; });\n\n     const personIndex = this.state.persons.findIndex(p => {\n      \n         return p.id === id\n      });\n\n     const person = {...this.state.persons[personIndex]};\n     person.name = event.target.value;\n\n     const persons = [...this.state.persons];\n     persons[personIndex] = person;\n\n     this.setState({persons : persons})\n\n  }\n\n  deletePersonHandler = (index) => {\n    const persons = [...this.state.persons];\n          persons.splice(index,1);\n    this.setState({persons : persons});\n  }\n  togglePersonHandler = () => {\n    const doesshow = this.state.showPerson;\n    this.setState({showPerson : !doesshow})\n  }\n\n  render(){\n      return (\n        <div className=\"App\">\n          <h1>hii React </h1>\n          <Persons\n            persons = {this.state.persons}\n            changed = {this.nameChangeHandler}\n            clicked = {this.deletePersonHandler}\n          />\n        </div>\n      );\n  }\n\n}\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}